# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*"

test_str = ("retest18005551234"
	"1 800 555 1234"
	"+1 800 555-1234"
	"+86 800 555 1234"
	"1-800-555-1234"
	"1 (800) 555-1234"
	"(800)555-1234"
	"where is (800) my  555-1234"
	"(800)5551234"
	"800-555-1234"
	"800.555.1234"
	"800 555 1234x5678"
	"8005551234 x5678"
	"1    800    555-1234"
	"1----800----555-1234"
	"1-718-444-1122"
	"718-444-1122"
	"(718)-444-1122"
	"17184441122"
	"7184441122"
	"718.444.1122"
	"1718.444.1122"
	"1-123-456-7890"
	"1 123-456-7890"
	"1 (123) 456-7890"
	"1 123 456 7890"
	"1.123.456.7890"
	"+91 (123) 456-7890"
	"18005551234"
	"1 800 555 1234"
	"+1 800 555-1234"
	"+86 800 555 1234"
	"1-800-555-1234"
	"1 (800) 555-1234"
	"(800)555-1234"
	"(800) 555-1234"
	"(800)5551234"
	"800-555-1234"
	"800.555.1234"
	"18001234567"
	"1 800 123 4567"
	"1-800-123-4567"
	"+18001234567"
	"+1 800 123 4567"
	"+1 (800) 123 4567"
	"1(800)1234567"
	"+1800 1234567"
	"1.8001234567"
	"1.800.123.4567"
	"+1 (800) 123-4567"
	"18001234567"
	"1 800 123 4567"
	"+1 800 123-4567"
	"+86 800 123 4567"
	"1-800-123-4567"
	"1 (800) 123-4567"
	"(800)123-4567"
	"(800) 123-4567"
	"(800)1234567"
	"800-123-4567"
	"800.123.4567"
	"1231231231"
	"123-1231231"
	"123123-1231"
	"123-123 1231"
	"123 123-1231"
	"123-123-1231"
	"(123)123-1231"
	"(123)123 1231"
	"(123) 123-1231"
	"(123) 123 1231"
	"+99 1234567890"
	"+991234567890"
	"(555) 444-6789"
	"555-444-6789"
	"555.444.6789"
	"555 444 6789"
	"18005551234"
	"1 800 555 1234"
	"+1 800 555-1234"
	"+86 800 555 1234"
	"1-800-555-1234"
	"1.800.555.1234"
	"+1.800.555.1234"
	"1 (800) 555-1234"
	"(800)555-1234"
	"(800) 555-1234"
	"(800)5551234"
	"800-555-1234"
	"800.555.1234"
	"(003) 555-1212"
	"(103) 555-1212"
	"(911) 555-1212"
	"18005551234sdfsdf"
	"1 800 555 1234"
	"+86 800-555-1234"
	"1 (800) 555-1234")
def regex_with_finditer(regex,str_r,index=False):
    r_out=[]
    matches = re.finditer(regex, str_r, re.MULTILINE)

    for matchNum, match in enumerate(matches, start=1):
        if index:
            temp=[match.group(), match.start(),match.end()]
            r_out.append(temp)
        else:
            r_out.append(match.group())
        
    return r_out


print(regex_with_finditer(regex,test_str))